<Project>
  <Name>XFilesArchive</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Wrapper</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>ModelWrapper&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="82" top="42" />
        <Size width="428" height="181" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public readonly T Model</Member>
        <Member type="Constructor">public ModelWrapper(T model)</Member>
        <Member type="Method">protected void GetValue&lt;TValue&gt;(string propertyName)</Member>
        <Member type="Method">protected void SetValue&lt;TValue&gt;(TValue value, string propertyName)</Member>
        <Member type="Method">private void ValidatePropertyInternal(string propertyName)</Member>
        <Member type="Method">protected IEnumerable&lt;string&gt; ValidateProperty(string propertyName)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>NotifyDataErrorInfoBase</Name>
        <Access>Public</Access>
        <Location left="82" top="247" />
        <Size width="418" height="200" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public bool HasErrors</Member>
        <Member type="Field">private Dictionary&lt;string, List&lt;string&gt;&gt; _errorsByPropertyName</Member>
        <Member type="Method">public IEnumerable GetErrors(string propertyName)</Member>
        <Member type="Method">protected virtual void OnErrorChanged(string propertyName)</Member>
        <Member type="Method">protected void AddError(string propertyName, string error)</Member>
        <Member type="Method">protected void ClearErrors(string propertyName)</Member>
        <Member type="Event">public event EventHandler&lt;DataErrorsChangedEventArgs&gt; ErrorsChanged</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ViewModelBase</Name>
        <Access>Public</Access>
        <Location left="590" top="143" />
        <Size width="341" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Event">public event PropertyChangedEventHandler PropertyChanged</Member>
        <Member type="Method">public virtual void OnPropertyChanged(string propertyNamel)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>INotifyDataErrorInfo</Name>
        <Access>Public</Access>
        <Location left="117" top="525" />
        <Size width="215" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>DependencyObject</Name>
        <Access>Public</Access>
        <Location left="539" top="42" />
        <Size width="203" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>INotifyPropertyChanged</Name>
        <Access>Public</Access>
        <Location left="796" top="42" />
        <Size width="194" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>DetailViewModelBase</Name>
        <Access>Public</Access>
        <Location left="1084" top="88" />
        <Size width="307" height="423" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private bool _hasChanges</Member>
        <Member type="Field">protected readonly IEventAggregator EventAggregator</Member>
        <Member type="Field">private int _id</Member>
        <Member type="Field">private string _title</Member>
        <Member type="Property">public ICommand CloseDetailViewModelCommand { get; private set; }</Member>
        <Member type="Method">protected abstract void OnSaveExecute()</Member>
        <Member type="Method">protected virtual void RaiseDetailSavedEvent(int modelId, string displayMember)</Member>
        <Member type="Property">public string Title { get; set; }</Member>
        <Member type="Property">public ICommand SaveCommand { get; private set; }</Member>
        <Member type="Property">public ICommand DeleteCommand { get; private set; }</Member>
        <Member type="Property">public IMessageDialogService MessageDialogService { get; }</Member>
        <Member type="Constructor">public DetailViewModelBase(IEventAggregator eventAggregator, IMessageDialogService _messageDialogService)</Member>
        <Member type="Method">protected virtual void OnCloseDetailViewExecute()</Member>
        <Member type="Method">public abstract Task LoadAsync(int id)</Member>
        <Member type="Method">protected abstract void OnDeleteExecute()</Member>
        <Member type="Method">protected abstract bool OnSaveCanExecute()</Member>
        <Member type="Property">public bool HasChanges { get; set; }</Member>
        <Member type="Property">public int Id { get; set; }</Member>
        <Member type="Method">protected Task SaveWithOptimisticConcurrencyAsync(Func&lt;Task&gt; saveFunc, Action afterSaveAction)</Member>
        <Member type="Method">protected virtual void RaiseCollectionSavedEvent()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IDetailViewModel</Name>
        <Access>Public</Access>
        <Location left="601" top="290" />
        <Size width="223" height="119" />
        <Collapsed>False</Collapsed>
        <Member type="Method">Task LoadAsync(int id)</Member>
        <Member type="Property">bool HasChanges { get; }</Member>
        <Member type="Property">int Id { get; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>FilesOnDriveViewModel</Name>
        <Access>Public</Access>
        <Location left="409" top="473" />
        <Size width="605" height="362" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly IArchiveEntityRepository _repository</Member>
        <Member type="Field">private readonly IEventAggregator _eventAggregator</Member>
        <Member type="Field">private readonly IMessageDialogService _messageDialogService</Member>
        <Member type="Field">private ArchiveEntityWrapper _archiveEntity</Member>
        <Member type="Constructor">FilesOnDriveViewModel(IEventAggregator eventAggregator, IMessageDialogService messageDialogService, IArchiveEntityRepository repository, ICategoryNavigationViewModel categoryNavigationViewModel, ICategoryDataProvider categoryDataProvider)</Member>
        <Member type="Method">private void OnSelectedItemChanged(int obj)</Member>
        <Member type="Property">public ObservableCollection&lt;TagWrapper&gt; Tags { get; }</Member>
        <Member type="Method">private void InitializeTags(ICollection&lt;Tag&gt; tags)</Member>
        <Member type="Method">private void Wrapper_PropertyChanged(object sender, PropertyChangedEventArgs e)</Member>
        <Member type="Method">private void InvalidateCommands()</Member>
        <Member type="Method">public override Task LoadAsync(int id)</Member>
        <Member type="Method">protected override void OnDeleteExecute()</Member>
        <Member type="Method">protected override bool OnSaveCanExecute()</Member>
        <Member type="Method">protected override void OnSaveExecute()</Member>
        <Member type="Property">public ArchiveEntityWrapper ArchiveEntity { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IFilesOnDriveViewModel</Name>
        <Access>Public</Access>
        <Location left="1121" top="658" />
        <Size width="162" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="0" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="1" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="1" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="2" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="2" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="6" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1059</X>
          <Y>199</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1028</X>
          <Y>232</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="6" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="8" second="6">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="8" second="9">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>FirstWrapper</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>ChangeTrackingCollection&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="119" top="27" />
        <Size width="645" height="366" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private IList&lt;T&gt; _originalCollection</Member>
        <Member type="Field">private ObservableCollection&lt;T&gt; _addedItems</Member>
        <Member type="Field">private ObservableCollection&lt;T&gt; _removedItems</Member>
        <Member type="Field">private ObservableCollection&lt;T&gt; _modifiedItems</Member>
        <Member type="Constructor">ChangeTrackingCollection(IEnumerable&lt;T&gt; items)</Member>
        <Member type="Property">public ReadOnlyObservableCollection&lt;T&gt; AddedItems { get; private set; }</Member>
        <Member type="Property">public ReadOnlyObservableCollection&lt;T&gt; RemovedItems { get; private set; }</Member>
        <Member type="Property">public ReadOnlyObservableCollection&lt;T&gt; ModifiedItems { get; private set; }</Member>
        <Member type="Property">public bool IsChanged { get; }</Member>
        <Member type="Method">public void AcceptChanges()</Member>
        <Member type="Method">public void RejectChanges()</Member>
        <Member type="Method">protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e)</Member>
        <Member type="Method">private void ItemPropertyChanged(object sender, PropertyChangedEventArgs e)</Member>
        <Member type="Method">private void AttachItemPropertyChangedHandler(IEnumerable&lt;T&gt; items)</Member>
        <Member type="Method">private void DetachItemPropertyChangedHandler(IEnumerable&lt;T&gt; items)</Member>
        <Member type="Method">private void UpdateObservableCollection(ObservableCollection&lt;T&gt; collection, IEnumerable&lt;T&gt; items)</Member>
        <Member type="Property">public bool IsValid { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ObservableCollection&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="980" top="27" />
        <Size width="245" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ModelWrapper&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="119" top="413" />
        <Size width="895" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Dictionary&lt;string, object&gt; _originalValues</Member>
        <Member type="Field">private List&lt;IValidatableTrackingObject&gt; _trackingObjects</Member>
        <Member type="Constructor">public ModelWrapper(T model)</Member>
        <Member type="Method">protected virtual void InitializeComplexProperties(T model)</Member>
        <Member type="Method">protected virtual void InitializeCollectionProperties(T model)</Member>
        <Member type="Property">public T Model { get; private set; }</Member>
        <Member type="Property">public bool IsChanged { get; set; }</Member>
        <Member type="Property">public bool IsValid { get; set; }</Member>
        <Member type="Method">public void AcceptChanges()</Member>
        <Member type="Method">public void RejectChanges()</Member>
        <Member type="Method">protected TValue GetValue&lt;TValue&gt;(string propertyName = null)</Member>
        <Member type="Method">protected TValue GetOriginalValue&lt;TValue&gt;(string propertyName)</Member>
        <Member type="Method">protected bool GetIsChanged(string propertyName)</Member>
        <Member type="Method">protected void SetValue&lt;TValue&gt;(TValue newValue, string propertyName = null)</Member>
        <Member type="Method">private void Validate()</Member>
        <Member type="Method">private void UpdateOriginalValue(object currentValue, object newValue, string propertyName)</Member>
        <Member type="Method">protected void RegisterCollection&lt;TWrapper, TModel&gt;(ChangeTrackingCollection&lt;TWrapper&gt; wrapperCollection, List&lt;TModel&gt; modelCollection)</Member>
        <Member type="Method">protected void RegisterComplex&lt;TModel&gt;(ModelWrapper&lt;TModel&gt; wrapper)</Member>
        <Member type="Method">private void RegisterTrackingObject(IValidatableTrackingObject trackingObject)</Member>
        <Member type="Method">private void TrackingObjectPropertyChanged(object sender, PropertyChangedEventArgs e)</Member>
        <Member type="Method">public virtual IEnumerable&lt;ValidationResult&gt; Validate(ValidationContext validationContext)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IValidatableTrackingObject</Name>
        <Access>Public</Access>
        <Location left="999" top="272" />
        <Size width="232" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Property">bool IsValid { get; }</Member>
      </Entity>
      <Entity type="Comment">
        <Text>where T : class, IValidatableTrackingObject</Text>
        <Location left="922" top="122" />
        <Size width="304" height="50" />
      </Entity>
      <Entity type="Interface">
        <Name>IRevertibleChangeTracking</Name>
        <Access>Public</Access>
        <Location left="999" top="180" />
        <Size width="285" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Interface">
        <Name>INotifyPropertyChanged</Name>
        <Access>Public</Access>
        <Location left="1305" top="336" />
        <Size width="285" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>NotifyDataErrorInfoBase</Name>
        <Access>Public</Access>
        <Location left="1099" top="443" />
        <Size width="226" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected readonly Dictionary&lt;string, List&lt;string&gt;&gt; Errors</Member>
        <Member type="Constructor">NotifyDataErrorInfoBase()</Member>
        <Member type="Property">public bool HasErrors { get; set; }</Member>
        <Member type="Event">public event EventHandler&lt;DataErrorsChangedEventArgs&gt; ErrorsChanged</Member>
        <Member type="Method">public IEnumerable GetErrors(string propertyName)</Member>
        <Member type="Method">protected virtual void OnErrorsChanged(string propertyName)</Member>
        <Member type="Method">protected void ClearErrors()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IValidatableObject</Name>
        <Access>Public</Access>
        <Location left="1354" top="696" />
        <Size width="162" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>Observable</Name>
        <Access>Public</Access>
        <Location left="1423" top="469" />
        <Size width="162" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Event">public event PropertyChangedEventHandler PropertyChanged</Member>
        <Member type="Method">protected virtual void OnPropertyChanged(string propertyName = null)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>INotifyDataErrorInfo</Name>
        <Access>Public</Access>
        <Location left="1384" top="622" />
        <Size width="210" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="0" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="0" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="3" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1120</X>
          <Y>271</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="3" second="6">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1282</X>
          <Y>315</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="2" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="2" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>477</X>
          <Y>399</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="2" second="8">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="7" second="9">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="7" second="10">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="9" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1418</X>
          <Y>424</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>